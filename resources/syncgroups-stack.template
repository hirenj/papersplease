{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Google drive webhook consumer",
  "Parameters" : {
    "GOOGLEAPIKEY": {
      "NoEcho": "true",
      "Type": "String",
      "Default": "",
      "Description": "API Key for Google auth"
    },
    "GOOGLEAPISECRET": {
      "NoEcho": "true",
      "Type": "String",
      "Default": "",
      "Description": "API secret for Google auth"
    },
    "GOOGLEREFRESHTOKEN": {
      "NoEcho": "true",
      "Type": "String",
      "Default": "",
      "Description": "Refresh Token for Google auth for user"
    },
    "VALIDUSERS" : {
      "Type": "String",
      "Default": "",
      "Description": "Valid users"
    }
  },
  "Resources": {
    "dataBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-papers"
            ]
          ]
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event" : "s3:ObjectCreated:*",
              "Function" : { "Fn::GetAtt": ["pdfChangedEvent", "Arn"] },
              "Filter" : {
                "S3Key" : {
                  "Rules" : [{
                    "Name" : "prefix",
                    "Value" : "uploads"
                  }]
                }
              }
            }
          ]
        }
      }
    },
    "DownloadQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Fn::Join" :  [ "-", [ { "Ref" : "AWS::StackName" }, "DownloadQueue" ] ] },
        "VisibilityTimeout": "300"
      }
    },
    "SyncGroupsLogWriterPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogWriterPolicy",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              }
            ]
        },
        "Roles" : [ { "Ref" : "LambdaDownloadFilesRole" },
                    { "Ref" : "LambdaSubscribeWebhookRole" },
                    { "Ref" : "GoogleWebhookLambdaRole" },
                    { "Ref" : "LambdaQueueDownloadsRole" },
                    { "Ref" : "LambdaRunDoTaggingRole"}
                    ]
      },
      "DependsOn" : ["LambdaSubscribeWebhookRole","LambdaDownloadFilesRole","GoogleWebhookLambdaRole", "LambdaQueueDownloadsRole"]
    },
    "LambdaQueueDownloadsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ {"Ref" : "WriteDownloadQueue"},{ "Ref" : "ReadWriteConf" } ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "WriteDownloadQueue" ]
    },
    "LambdaDownloadFilesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ {"Ref" : "ConsumeDownloadQueue"},{ "Ref" : "ReadWriteConf" }, { "Ref" : "ReadWriteUploads"}],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "ConsumeDownloadQueue" ]
    },
    "LambdaSubscribeWebhookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "ReadWriteConf" } ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : []
    },
    "downloadFiles" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.downloadFiles = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "downloadFiles",
        "Handler" : "index.downloadFiles",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadFilesRole", "Arn"] },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] },
            "DOWNLOAD_QUEUE": { "Ref" : "DownloadQueue" },
            "GOOGLE_API_SECRET": {
              "Ref": "GOOGLEAPISECRET"
            },
            "GOOGLE_API_KEY": {
              "Ref": "GOOGLEAPIKEY"
            },
            "GOOGLE_REFRESH_TOKEN": {
              "Ref": "GOOGLEREFRESHTOKEN"
            }
          }
        },
        "Runtime" : "nodejs6.10",
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaDownloadFilesRole"
    },
    "queueDownloads" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.queueDownloads = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "queueDownloads",
        "Handler" : "index.queueDownloads",
        "Role" : {"Fn::GetAtt" : ["LambdaQueueDownloadsRole", "Arn"] },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] },
            "DOWNLOAD_QUEUE": { "Ref" : "DownloadQueue" },
            "GOOGLE_API_SECRET": {
              "Ref": "GOOGLEAPISECRET"
            },
            "GOOGLE_API_KEY": {
              "Ref": "GOOGLEAPIKEY"
            },
            "GOOGLE_REFRESH_TOKEN": {
              "Ref": "GOOGLEREFRESHTOKEN"
            }
          }
        },
        "Runtime" : "nodejs6.10",
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaQueueDownloadsRole"
    },
    "extractTags" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "def lambda_handler(event,context={}):",
            "  return ''"
          ]]}
        },
        "Description" : "extractTags",
        "Handler" : "index.extractTags",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadFilesRole", "Arn"] },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] }
          }
        },
        "Runtime" : "python3.6",
        "MemorySize" : 512,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaDownloadFilesRole"
    },
    "setTags" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.setTags = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "setTags",
        "Handler" : "index.setTags",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadFilesRole", "Arn"] },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] },
            "VALID_USERS": {
              "Ref": "VALIDUSERS"
            },
            "GOOGLE_API_SECRET": {
              "Ref": "GOOGLEAPISECRET"
            },
            "GOOGLE_API_KEY": {
              "Ref": "GOOGLEAPIKEY"
            },
            "GOOGLE_REFRESH_TOKEN": {
              "Ref": "GOOGLEREFRESHTOKEN"
            }
          }
        },
        "Runtime" : "nodejs6.10",
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaDownloadFilesRole"
    },
    "subscribeWebhook" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.subscribeWebhook = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "subscribeWebhook",
        "Handler" : "index.subscribeWebhook",
        "Role" : {"Fn::GetAtt" : ["LambdaSubscribeWebhookRole", "Arn"] },
        "Runtime" : "nodejs6.10",
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] }
          }
        },
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaSubscribeWebhookRole"
    },
    "WriteDownloadQueue": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "WriteDownloadQueue",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "WriteDownloadQueue",
                  "Effect": "Allow",
                  "Action": "sqs:SendMessage",
                  "Resource" : { "Fn::GetAtt" : ["DownloadQueue","Arn"]}
                }
            ]
        }
      },
      "DependsOn": "DownloadQueue"
    },
    "ConsumeDownloadQueue": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ConsumeDownloadQueue",
        "PolicyDocument" : {
            "Id" : "ConsumeDownloadQueue",
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "ConsumeDownloadQueueSQS",
                  "Effect": "Allow",
                  "Action": [ "sqs:ReceiveMessage", "sqs:GetQueueUrl","sqs:ChangeMessageVisibility", "sqs:DeleteMessage", "sqs:GetQueueAttributes" ],
                  "Resource" : { "Fn::GetAtt" : ["DownloadQueue","Arn"]}
                }
            ]
        }
      },
      "DependsOn": "DownloadQueue"
    },
    "ReadWriteUploads" : {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ReadWriteUploads",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-papers/uploads/*" ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-papers" ] ] }
              ],
              "Condition": {"StringLike":{"s3:prefix":["uploads/*"]}}
            }
          ]
        }
      }
    },
    "ReadWriteConf" : {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ReadWriteConf",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-papers/config/*" ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-papers" ] ] }
              ],
              "Condition": {"StringLike":{"s3:prefix":["config/*"]}}
            }
          ]
        }
      }
    },
    "LambdaSubscribeWebhookInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["subscribeWebhook", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : {"Fn::Join": [":", [ "arn:aws:events", { "Ref" : "AWS::Region" } , {"Ref" : "AWS::AccountId" }, "rule/GoogleWebhookWatcher"]] }
      },
      "Metadata" : {
        "Comment" : "Used to maintain a subscription to the webhook. Manages its own events"
      }
    },
    "StateDoTagging": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
           "Fn::Join": [
              "\n",
              [
                 "{",
                 "    \"StartAt\": \"getKey\",",
                 "    \"States\" : {",
                 "      \"getKey\" :{",
                 "        \"Type\": \"Pass\",",
                 "        \"InputPath\": \"$.Records[0].s3.object.key\",",
                 "        \"ResultPath\": \"$.object.key\",",
                 "        \"OutputPath\" : \"$\",",
                 "        \"Next\": \"getBucket\"",
                 "        },",
                 "      \"getBucket\" :{",
                 "        \"Type\": \"Pass\",",
                 "        \"InputPath\": \"$.Records[0].s3.bucket.name\",",
                 "        \"ResultPath\": \"$.object.bucket\",",
                 "        \"OutputPath\" : \"$.object\",",
                 "        \"Next\": \"extractTags\"",
                 "        },",
                 "        \"extractTags\" : {",
                 "            \"Type\" : \"Task\", ",
                 { "Fn::Join": ["",["            \"Resource\" : \"",{ "Fn::GetAtt": ["extractTags", "Arn"] },"\","]] },
                 "            \"Next\" : \"setTags\",",
                 "            \"ResultPath\" : \"$.extracted\" ",
                 "        },",
                 "        \"setTags\" : {",
                 "            \"Type\" : \"Task\", ",
                 { "Fn::Join": ["",["            \"Resource\" : \"",{ "Fn::GetAtt": ["setTags", "Arn"] },"\","]] },
                 "            \"Next\" : \"Finished\"",
                 "        },",
                 "        \"Finished\": {",
                 "            \"Type\": \"Succeed\"",
                 "        }",
                 "    }",
                 "}"
              ]
           ]
        },
        "RoleArn" : { "Fn::GetAtt": ["StateDoTaggingRole", "Arn"] }
      }
    },
    "StateDownloadFiles": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
           "Fn::Join": [
              "\n",
              [
                 "{",
                 "    \"StartAt\": \"downloadFiles\",",
                 "    \"States\" : {",
                 "        \"QueueChoice\" : {",
                 "            \"Type\" : \"Choice\", ",
                 "            \"Choices\" : [ ",
                 "                { \"Variable\": \"$.messageCount\", \"NumericGreaterThan\": 0, \"Next\": \"downloadFiles\" }",
                 "                          ],",
                 "            \"Default\" : \"Finished\"",
                 "        },",
                 "        \"downloadFiles\" : {",
                 "            \"Type\" : \"Task\", ",
                 { "Fn::Join": ["",["            \"Resource\" : \"",{ "Fn::GetAtt": ["downloadFiles", "Arn"] },"\","]] },
                 "            \"Next\" : \"QueueChoice\",",
                 "            \"Catch\": [ {",
                 "               \"ErrorEquals\": [\"States.ALL\"],",
                 "               \"Next\": \"Finished\"",
                 "            } ],",
                 "            \"Retry\" : [",
                 "              {",
                 "                \"ErrorEquals\": [ \"States.Timeout\" ],",
                 "                \"MaxAttempts\": 1",
                 "              },",
                 "              {",
                 "                \"ErrorEquals\": [ \"States.ALL\" ],",
                 "                \"MaxAttempts\": 0",
                 "              }",
                 "            ]",
                 "        },",
                 "        \"Finished\": {",
                 "            \"Type\": \"Succeed\"",
                 "        }",
                 "    }",
                 "}"
              ]
           ]
        },
        "RoleArn" : { "Fn::GetAtt": ["StateDownloadFilesRole", "Arn"] }
      }
    },
    "StateDownloadFilesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {"Fn::Join": ["", [ "states.", { "Ref" : "AWS::Region" } , ".amazonaws.com" ]] }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies" : [{
            "PolicyName" : "AllowLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                    "Sid": "RegisterEvents",
                    "Effect": "Allow",
                    "Action": [ "lambda:InvokeFunction" ],
                    "Resource" : [
                      { "Fn::GetAtt": ["downloadFiles", "Arn"] }
                    ]
                  }
              ]
            }
        }]
      }
    },
    "StateDoTaggingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {"Fn::Join": ["", [ "states.", { "Ref" : "AWS::Region" } , ".amazonaws.com" ]] }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies" : [{
            "PolicyName" : "AllowLambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                    "Sid": "RegisterEvents",
                    "Effect": "Allow",
                    "Action": [ "lambda:InvokeFunction" ],
                    "Resource" : [
                      { "Fn::GetAtt": ["setTags", "Arn"] },
                      { "Fn::GetAtt": ["extractTags", "Arn"] }
                    ]
                  }
              ]
            }
        }]
      }
    },
    "bucketperm": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": { "Fn::GetAtt": ["pdfChangedEvent", "Arn"] },
          "Principal": "s3.amazonaws.com",
          "SourceAccount": {"Ref": "AWS::AccountId"},
          "SourceArn": { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-papers" ] ] }
      }
    },
    "pdfChangedEvent" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "'use strict';",
            "const triggerMachine = function(event) {",
            "  const AWS = require('aws-sdk');",
            "  const stepfunctions = new AWS.StepFunctions();",
            "  let params = {",
            "    stateMachineArn: '",{ "Ref" : "StateDoTagging" },"' ,",
            "    input: JSON.stringify(event)",
            "  };",
            "  return new Promise( (res,rej) => stepfunctions.startExecution(params, (err,r) => { err ? rej(err) : res(r) } ) );",
            "};",
            "",
            "exports.handler = function(event,context) {",
            "  triggerMachine(event)",
            "  .then( () => context.succeed({'status': 'OK' }))",
            "  .catch( err => {",
            "    console.log(err);",
            "    context.fail({'status' : err.message });",
            "  });",
            "};"
          ]]}
        },
        "Description" : "pdfChangedEvent",
        "Handler" : "index.handler",
        "Role" : {"Fn::GetAtt" : ["LambdaRunDoTaggingRole", "Arn"] },
        "Environment": {
          "Variables": {
          }
        },
        "Runtime" : "nodejs6.10",
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaRunDoTaggingRole"
    },
    "LambdaRunDoTaggingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "StartExecutionStateDoTagging"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "StartExecutionStateDoTagging": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "StartExecutionStateDoTagging",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "states:StartExecution",
                "states:ListExecutions"
              ],
              "Resource": [
                {
                  "Ref": "StateDoTagging"
                }
              ]
            }
          ]
        }
      }
    },
    "StartExecutionStateDownloadFiles": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "StartExecutionStateDownloadFiles",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "states:StartExecution",
                "states:ListExecutions"
              ],
              "Resource": [
                {
                  "Ref": "StateDownloadFiles"
                }
              ]
            }
          ]
        }
      }
    },
    "GoogleWebhookLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
            "'use strict';",
            "",
            "exports.googleWebhook = (event, context, callback) => {",
            "  console.log('Event:', JSON.stringify(event));",
            "  const response = {};",
            "  callback(null, response);",
            "};"
          ]]}
        },
        "Description": "Google drive webhook consumer",
        "Handler": "index.googleWebhook",
        "Role": { "Fn::GetAtt": ["GoogleWebhookLambdaRole", "Arn"]},
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Fn::Join" :  [ "", [ { "Ref" : "AWS::StackName" }, "-papers" ] ] },
            "DOWNLOAD_QUEUE": { "Ref" : "DownloadQueue" },
            "DOWNLOAD_QUEUE_MACHINE": { "Ref" : "StateDownloadFiles" },
            "GOOGLE_API_SECRET": {
              "Ref": "GOOGLEAPISECRET"
            },
            "GOOGLE_API_KEY": {
              "Ref": "GOOGLEAPIKEY"
            },
            "GOOGLE_REFRESH_TOKEN": {
              "Ref": "GOOGLEREFRESHTOKEN"
            }
          }
        },
        "Timeout" : 300,
        "Runtime": "nodejs6.10"
      }
    },

    "GoogleWebhookLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", {"Ref" : "WriteDownloadQueue"}, {"Ref" : "StartExecutionStateDownloadFiles"} ]
      }
    },

    "WebhookApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Google drive Webhook API",
        "Description": "Google drive webhook API",
        "FailOnWarnings": true
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GoogleWebhookLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "WebhookApi"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "WebhookApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "WebhookApi"},
        "StageName": "LATEST",
        "Variables": {
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["GoogleRequestALL"],
      "Properties": {
        "RestApiId": {"Ref": "WebhookApi"},
        "StageName": "DummyStage"
      }
    },

    "WebhookResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "WebhookApi"},
        "ParentId": {"Fn::GetAtt": ["WebhookApi", "RootResourceId"]},
        "PathPart": "google"
      }
    },

    "GoogleRequestALL": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GoogleWebhookLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200,
            "ResponseTemplates": {}
          }],
          "PassthroughBehavior": "WHEN_NO_MATCH"
        },
        "RequestParameters": {},
        "ResourceId": {"Ref": "WebhookResource"},
        "RestApiId": {"Ref": "WebhookApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }
  },
  "Outputs": {
  }
}