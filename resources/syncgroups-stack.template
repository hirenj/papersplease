{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
    "WriteGrants" : {
      "Type" : "String",
      "Description" : "Arn for policy for writing to grants store"
    }
  },
  "Resources": {
    "DownloadTopic": {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "DisplayName" : "Files to download from Google drive",
        "TopicName" : { "Fn::Join" :  [ "-", [ { "Ref" : "AWS::StackName" }, "download" ] ] },
        "Subscription" : [{
          "Endpoint" : { "Fn::GetAtt" : [ "downloadFile" , "Arn" ] },
          "Protocol" : "lambda"
        }]
      }
    },
    "DownloadQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Fn::Join" :  [ "-", [ { "Ref" : "AWS::StackName" }, "DownloadQueue" ] ] },
        "VisibilityTimeout": "300"
      }
    },
    "SyncGroupsLogWriterPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogWriterPolicy",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              }
            ]
        },
        "Roles" : [ { "Ref" : "LambdaPopulateGroupGrantsRole" },
                    { "Ref" : "LambdaAcceptWebhookRole"},
                    { "Ref" : "LambdaDownloadFilesRole" },
                    { "Ref" : "LambdaDownloadFileRole" },
                    { "Ref" : "LambdaDownloadEverythingRole" },
                    { "Ref" : "LambdaSubscribeWebhookRole" }]
      },
      "DependsOn" : ["LambdaPopulateGroupGrantsRole","LambdaDownloadFilesRole","LambdaDownloadFileRole","LambdaDownloadEverythingRole","LambdaAcceptWebhookRole"]
    },
    "LambdaPopulateGroupGrantsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "DecryptKeys" }, {"Ref" : "WriteGrants"}, {"Ref" : "RegisterEvents"}],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "WriteGrants", "DecryptKeys" ]
    },
    "LambdaDownloadFilesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "DecryptKeys" }, {"Ref" : "ConsumeDownloadQueue"}, {"Ref" : "WriteDownloadTopic"},{"Ref" : "RegisterEvents"},{"Ref" : "UpdateDataTableCapacity" }],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "ConsumeDownloadQueue", "WriteDownloadTopic", "DecryptKeys" ]
    },
    "LambdaDownloadFileRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "ConsumeDownloadQueue" }, {"Ref" : "UploadsSource"}],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "ConsumeDownloadQueue", "UploadsSource" ]
    },
    "LambdaDownloadEverythingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "DecryptKeys" }, {"Ref" : "WriteDownloadQueue"}, {"Ref" : "RegisterEvents"}, {"Ref" : "ReadValidGroups"}, {"Ref" : "ReadWriteUploads"},{"Ref" : "UpdateDataTableCapacity" }],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : [ "DecryptKeys", "WriteDownloadQueue" ]
    },
    "LambdaSubscribeWebhookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ { "Ref" : "DecryptKeys" }, {"Ref" : "RegisterEvents"} ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : []
    },
    "LambdaAcceptWebhookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : [ {"Ref" : "RegisterEvents"} ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      },
      "DependsOn" : []
    },
    "populateGroupGrants" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.exchangetoken = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "populateGroupGrants",
        "Handler" : "index.populateGroupGrants",
        "Role" : {"Fn::GetAtt" : ["LambdaPopulateGroupGrantsRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 20
      },
      "DependsOn" : "LambdaPopulateGroupGrantsRole"
    },
    "downloadFile" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.downloadFile = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "downloadFile",
        "Handler" : "index.downloadFile",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadFileRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 20
      },
      "DependsOn" : "LambdaDownloadFileRole"
    },
    "downloadFiles" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.downloadFiles = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "downloadFiles",
        "Handler" : "index.downloadFiles",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadFilesRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 20
      },
      "DependsOn" : "LambdaDownloadFilesRole"
    },
    "downloadEverything" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.downloadEverything = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "downloadEverything",
        "Handler" : "index.downloadEverything",
        "Role" : {"Fn::GetAtt" : ["LambdaDownloadEverythingRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 300
      },
      "DependsOn" : "LambdaDownloadEverythingRole"
    },
    "subscribeWebhook" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.subscribeWebhook = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "subscribeWebhook",
        "Handler" : "index.subscribeWebhook",
        "Role" : {"Fn::GetAtt" : ["LambdaSubscribeWebhookRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 20
      },
      "DependsOn" : "LambdaSubscribeWebhookRole"
    },
    "acceptWebhook" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": { "Fn::Join": ["", [
            "exports.acceptWebhook = function(event, context) {",
            "  context.succeed('OK');",
            "};"
          ]]}
        },
        "Description" : "acceptWebhook",
        "Handler" : "index.acceptWebhook",
        "Role" : {"Fn::GetAtt" : ["LambdaAcceptWebhookRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "MemorySize" : 128,
        "Timeout" : 20
      },
      "DependsOn" : "LambdaAcceptWebhookRole"
    },
    "authSecrets" : {
      "Type" : "AWS::KMS::Key",
      "Properties" : {
        "Description" : {"Fn::Join" : [ "", [ "Secrets key for ", {"Ref" : "AWS::StackName"} ] ] },
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
          {
            "Sid": "Allow administration of the key",
            "Effect": "Allow",
            "Principal": {"AWS" : { "Fn::Join" :  [ "", [ "arn:aws:iam:",":", { "Ref" : "AWS::AccountId" } ,":root" ] ]} },
            "Action": [
              "kms:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Allow use of the key",
            "Effect": "Allow",
            "Principal": { "AWS": [
                              {"Fn::GetAtt" : [ "LambdaPopulateGroupGrantsRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadFileRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadFilesRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadEverythingRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaSubscribeWebhookRole","Arn" ]}
                          ] },
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncrypt",
              "kms:GenerateDataKey*",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Allow attachment of persistent resources",
            "Effect": "Allow",
            "Principal": { "AWS": [
                              {"Fn::GetAtt" : [ "LambdaPopulateGroupGrantsRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadFileRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadFilesRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaDownloadEverythingRole" , "Arn" ]},
                              {"Fn::GetAtt" : [ "LambdaSubscribeWebhookRole","Arn" ]}
                          ] },
            "Action": [
              "kms:CreateGrant",
              "kms:ListGrants",
              "kms:RevokeGrant"
            ],
            "Resource": "*",
            "Condition" : {
              "Bool" : { "kms:GrantIsForAWSResource" : "true" }
            }
          }
          ]
        }
      }
    },
    "DecryptKeys": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "DecryptKeys",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "DecryptKeys",
                  "Effect": "Allow",
                  "Action": "kms:Decrypt",
                  "Resource" : { "Fn::Join" :  [ "", [ "arn:aws:kms:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" } ,":", "*" ] ]}
                },
                {
                  "Sid": "ReadEncryptedData",
                  "Effect": "Allow",
                  "Action": [
                      "s3:GetObject"
                  ],
                  "Resource": { "Fn::Join" :  [ "", [ "arn:aws:s3:", ":" ,":", { "Ref" : "dataBucket" }, "/conf/creds.kms.json.encrypted" ] ]}
                }

            ]
        }
      }
    },
    "RegisterEvents": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "RegisterEvents",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "RegisterEvents",
                  "Effect": "Allow",
                  "Action": [ "events:PutRule", "events:ListRules", "events:PutTargets" ],
                  "Resource" : "*"
                }
            ]
        }
      }
    },
    "WriteDownloadQueue": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "WriteDownloadQueue",
        "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "WriteDownloadQueue",
                  "Effect": "Allow",
                  "Action": "sqs:SendMessage",
                  "Resource" : { "Fn::GetAtt" : ["DownloadQueue","Arn"]}
                }
            ]
        }
      },
      "DependsOn": "DownloadQueue"
    },
    "ConsumeDownloadQueue": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ConsumeDownloadQueue",
        "PolicyDocument" : {
            "Id" : "ConsumeDownloadQueue",
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "ConsumeDownloadQueueSQS",
                  "Effect": "Allow",
                  "Action": [ "sqs:ReceiveMessage", "sqs:GetQueueUrl","sqs:ChangeMessageVisibility", "sqs:DeleteMessage", "sqs:GetQueueAttributes" ],
                  "Resource" : { "Fn::GetAtt" : ["DownloadQueue","Arn"]}
                }
            ]
        }
      },
      "DependsOn": "DownloadQueue"
    },
    "WriteDownloadTopic": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "WriteDownloadTopic",
        "PolicyDocument" : {
            "Id" : "WriteDownloadTopic",
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Sid": "WriteDownloadTopicSNS",
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource" : { "Ref" : "DownloadTopic" }
                }                
            ]
        }
      },
      "DependsOn": "DownloadTopic"
    },
    "UploadsSource" : {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "UploadsSource",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-gator/uploads/*" ] ] }
              ]
            }
          ]
        }
      }
    },
    "ReadWriteUploads" : {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ReadWriteUploads",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:DeleteObject"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-gator/uploads/*" ] ] }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": [
                { "Fn::Join" :  [ "", [ "arn:aws:s3:::", { "Ref" : "AWS::StackName" }, "-gator" ] ] }
              ],
              "Condition": {"StringLike":{"s3:prefix":["uploads/*"]}}
            }
          ]
        }
      }
    },
    "ReadValidGroups" : {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "ReadValidGroups",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ReadGrantsConfig",
              "Effect": "Allow",
              "Action": [
                  "s3:GetObject"
              ],
              "Resource": { "Fn::Join" :  [ "", [ "arn:aws:s3:", ":" ,":", { "Ref" : "dataBucket" }, "/conf/groupids" ] ]}
            }

          ]
        }
      }
    },
    "UpdateDataTableCapacity": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "Update capacity for writing to data table",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                  "dynamodb:UpdateTable"
              ],
              "Resource": { "Fn::Join" :  [ "", [ "arn:aws:dynamodb:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" } ,":table/", { "Ref" : "data" } ] ]}
            }
          ]
        }
      }
    },
    "LambdaPopulateGroupGrantsPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["populateGroupGrants", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : {"Fn::Join": [":", [ "arn:aws:events", { "Ref" : "AWS::Region" } , {"Ref" : "AWS::AccountId" }, "rule/PopulateGroupGrants"]] }
      }
    },
    "LambdaDownloadFileInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["downloadFile", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": { "Ref" : "DownloadTopic" }
      }
    },
    "LambdaSubscribeWebhookInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["subscribeWebhook", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : {"Fn::Join": [":", [ "arn:aws:events", { "Ref" : "AWS::Region" } , {"Ref" : "AWS::AccountId" }, "rule/GoogleWebhookWatcher"]] }
      },
      "Metadata" : {
        "Comment" : "Used to maintain a subscription to the webhook. Manages its own events"
      }
    },
    "LambdaDownloadEverythingInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["downloadEverything", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : {"Fn::Join": [":", [ "arn:aws:events", { "Ref" : "AWS::Region" } , {"Ref" : "AWS::AccountId" }, "rule/GoogleDownloadFiles"]] }
      },
      "Metadata" : {
        "Comment" : "Invoked some minutes after last acceptWebhook call. acceptWebhook manages events"
      }
    },
    "LambdaDownloadFilesInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["downloadFiles", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : {"Fn::Join": [":", [ "arn:aws:events", { "Ref" : "AWS::Region" } , {"Ref" : "AWS::AccountId" }, "rule/DownloadFilesDaemon"]] }
      },
      "Metadata" : {
        "Comment" : "Invoked at a fixed time rate, controlled by itself and downloadEverything"
      }
    },
    "dataApiHook" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "hook"
      }
    },
    "dataApiHookPOST" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiHook" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "RequestParameters" : {},
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : {},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : 200
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "acceptWebhook" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiHookPOSTPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "acceptWebhook" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/POST/hook"]]
                    }
        }
    }
  },
  "Outputs": {
    "DownloadTopicName": {
      "Description": "Download SNS topic",
      "Value": { "Fn::GetAtt" : ["DownloadTopic","TopicName"]}
    }
  }
}